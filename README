Akiss is a tool for checking trace equivalence of security protocols.
It works in the so-called symbolic model, representing protocols by
processes in the applied pi-calculus, and allowing the user to describe
various security primitives by an equational theory. In order to show
that two processes are trace equivalent, Akiss derives a complete set
of tests for each trace of each process, using a saturation procedure
that performs ordered resolution with selection.

This is the "AC" version of Akiss, which supports one AC connective,
namely "plus". It comes with modifications of the resolution rules that
help reach saturation, mostly in the case where "plus" represents
exclusive or.

# Build

You will need OCaml; version 3.12 is known to work.

The AC version of Akiss also requires two external tools:
 * tamarin-prover (branch feature-ac-rewrite-rules)
 * maude (version 2.6)

To build, just run "make". If akiss does not detect tamarin and maude,
you may need to adjust your PATH and/or edit the file "config.ml".

# Usage

Usage: akiss [options] < specification-file.api
where available options are
  --verbose        Enable verbose output
  --debug          Enable debug output
  --ac-compatible  Use the AC-compatible toolbox even on non-AC theories.

For example:
./akiss --verbose < examples/strong-secrecy/blanchet.api 

# Source tree

Here is a quick guide to the organization of the source code:

 * util.ml: misc utilities
 * ast.ml, parser.mly, lexer.mll: parsing of API files
 * config.ml: detects external tools
 * term.ml: term structure and basic operations on them
 * maude.ml: interface with maude
 * lextam.mll parsetam.mly tamarin.ml: interface with tamarin
 * rewriting.ml: unification and variants for non-AC theories
 * theory.ml: process first half of API file,
     setting up the theory and appropriate rewriting toolbox
 * base.ml: data structure for the saturation algorithm
 * horn.ml: the saturation procedure itself
 * process.ml: processes and various operations on them,
     including the creation of protocol-related seed statements
 * main.ml: process second half of API file, create theory-related seed 
     statements and and perform queries
