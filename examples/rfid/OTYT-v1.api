// RFID protocol OTYT 06
// cf. Survey Attacks on RFID protocols. T. Deursen and S. Radomirovic
// The protocol is flawed. To help AKISS, we assume that an honest session
// has been eavesdropped.

#set xor;

// Signature xor and h

symbols plus/2, zero/0, h/1;
private kA1, kB1, r1, k1;
channels C;
var X,Y,Y2,Z2;

// We model RFID tags that authenticate with a reader
// in the following way:
// Reader and Tag know the key kX and its value will be updated an the end
// of each session

//   reader sends a nonce r1
//   tag sends h(kX + r1)
//   reader sends kX + k1 (k1 fresh key)
//   both update their key kX with k1.

// The protocol does not ensure untraceability: after eavesdropping one honest
// session between the reader and the tag A, the attacker knows
// w0 -> r1; w1 -> h(kA1 + r1); w2 -> kA1 + k1
// Then, a fake reader can initiate a session with
// the  nonce r1 + kA1 + k1 obtained by computing w0 + w2
// and will be able to tell if the two sessions are against
// the same tag or not. Indeed, the previously observed tag
// will respond with h(r1 + kA1 + k1 + k1) = h(r1 + kA1) and this is exactly w1.

// Tinit models the fact that the attacker is  eavesdropping an honest session.
// TtagB2 models the role of a tag B.
// TtagA2 models the following session executed by the tag A.
// Note also that we use new kA1 (i.e. k1) instead of kA1 to model the fact that
// the key has been updated after the first session.

Tinit = out(C,r1).out(C,h(plus(kA1,r1))).out(C,plus(kA1,k1)).0;
TtagA2 = in(C,Y2).out(C,h(plus(k1,Y2))).in(C,Z2).0;
TtagB2 = in(C,Y2).out(C,h(plus(kB1,Y2))).in(C,Z2).0;

r1 = Tinit :: TtagA2;
r2 = Tinit :: TtagB2;

inequivalentct? r1 and r2;

// AKISS concludes within 30s, returning two tests that correspond exactly
// to the attack mentioned above. This is actually the same test that can be
// done in two different symbolic worlds (before or after the last input action)
