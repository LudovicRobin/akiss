// Simplified version - without pair - of RFID protocol KCL 07
// cf. Survey Attacks on RFID protocols. T. Deursen and S. Radomirovic
// The protocol is flawed. 
// To help AKISS to find the attack, the two sessions are executed using
// the same input (the first one Y).

#set xor;

// Signature: xor and hash

symbols plus/2, zero/0, h/2;
private idA, idB, r2, r4, kA, kB, ok;
channels C;
var X, Y, Z;

rewrite plus(zero,X) -> X;
rewrite plus(X,X) -> zero;


// We model RFID tags that authenticate with a reader
// in the following way:
//   reader sends a nonce r1
//   tag A sends <idA+r2, h(r1,kA)+r2>

// The protocol does not ensure untraceability: a fake
// reader can initiate two sessions with the same nonce
// and will be able to tell if the two sessions are against
// the same tag or not. Indeed, by xoring the two outputs
// one gets idX+h(r1,kX).


TtagA1 = in(C,Y).out(C,plus(idA,r2)). out(C,plus(h(Y,kA),r2)).0;
TtagA2 = out(C,plus(idA,r4)). out(C,plus(h(Y,kA),r4)).0;
TtagB2 = out(C,plus(idB,r4)). out(C,plus(h(Y,kB),r4)).0;

r1 = TtagA1 :: TtagA2;
r2 = TtagA1 :: TtagB2;

inequivalentct? r1 and r2;

// 25/11/2013: AKISS concludes within 12m12s
// The following tests work on r1 but not on r2:
// check_identity([in(C,!n!13139),[out(C),[out(C),[out(C),[out(C),empty]]]]],plus(plus(plus(plus(plus(w0,w1),w2),w3),X1391),X1391),zero)
// check_identity([in(C,!n!13141),[out(C),[out(C),[out(C),[out(C),empty]]]]],plus(plus(plus(w0,w1),w2),w3),zero)
// check_identity([in(C,!n!13153),[out(C),[out(C),[out(C),[out(C),empty]]]]],plus(plus(plus(plus(plus(plus(plus(w0,w1),w2),w3),X12988),X12986),X12986),X12988),zero)
// check_identity([in(C,!n!13155),[out(C),[out(C),[out(C),[out(C),empty]]]]],plus(plus(plus(plus(plus(plus(plus(w0,w1),w2),w3),X12995),X12997),X12995),X12997),zero)
