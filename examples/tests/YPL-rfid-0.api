// simplified version of RFID protocol YPL 05

symbols plus/2, zero/0, h/1;
private kA1, kA2, kA, kB1, kB2, kB, r1;
channels C;
var X,Y,Y2,Z2;

rewrite plus(zero,X) -> X;
rewrite plus(X,X) -> zero;
rewrite plus(X, plus(X,Y)) -> Y;

// We model RFID tags that authenticate with a reader
// in the following way:
// Reader and Tag know k1,k2,k and the values k1 and k2 are updated after a successfull session.

//   reader sends a nonce r1
//   tag sends h(kA1 + r1 + kA)
//   reader sends h(kA2)
//   both update their keys kA1,kA2 as follows:
//   new kA1 = kA1 + h(kA2)
//   new kA2 = kA2 + h(kA1 + r1 + kA)

// The protocol does not ensure untraceability: after eavesdropping one honest session
// between the reader and the tag A, the attacker knows
// w0 -> r1; w1 -> h(kA1 + r1 + kA); w2 -> h(kA2)
// Then, a fake reader can initiate a session with 
// the  nonce r1 + h(kA2)obtained by computing w0 + w2
// and will be able to tell if the two sessions are against
// the same tag or not. Indeed, the previously observed tag 
// will respond with h(kA1 + r1 + kA) and this is exactly w1.

// This is a simplified version of  the protoco to track a problem with -xor option. 
// Tinit models the fact that the attacker is  eavesdropping an honest session.
// TtagB2 models the role of a tag B. 
// TtagA2 models the following session executed by the tag A.
// Note also that we use new kA1 and new kA2 instead of kA1 and KA2 to model the fact that 
// the keys have been updated after the first session.

Tinit = out(C,r1).out(C,h(plus(kA1,plus(r1,kA)))).out(C,h(kA2)).0;
TtagA2 = in(C,Y2).out(C,h(plus(kA1,plus(h(kA2),plus(Y2,kA))))).0;
TtagB2 = in(C,Y2).out(C,h(plus(kB1,plus(Y2,kB)))).0;

r1 = Tinit :: TtagA2;
r2 = Tinit :: TtagB2;

equivalentct? r1 and r2;


//21/03/2013: AKISS finds the attack but proves the protocol secure if -xor is switched on.

