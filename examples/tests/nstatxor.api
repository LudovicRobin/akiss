#set xor;

symbols plus/2, zero/0, c/0;

private a, b, ok;
channels C;
var X, Y, Z;

rewrite plus(zero,X) -> X;
rewrite plus(X,X) -> zero;

s1 = out(C,a).out(C,plus(a,b));
r1 = out(C,a).out(C,plus(a,c));

inequivalentct? s1 and r1;

s2 = out(C,plus(a,b)).out(C,plus(a,c)).out(C,b);
r2 = out(C,plus(a,b)).out(C,plus(a,c)).out(C,plus(b,c));

// Saturating r2 is quite long if c is public, reasonable otherwise:
// from 11m to 20s!
// And from 11m to 46s without matching modulo AC in same statement:
// after normalization, which brings us from
//   194 add and 86 same_st
// to 228 and 81
// It helps a lot if we drop "not useful" clauses not only immediately
// after equation but also after resolution and (even better) after
// canonization. Then we get a reasonable set of ridentical statements.
// TODO funnily we have
// check_identity(...,plus(w0,w1),w2)
// check_identity(...,plus(w0,w2),w1)
// check_identity(...,plus(w1,w2),w0)
// check_identity(...,plus(plus(w0,w2),X166),plus(w1,X166))
// check_identity(...,plus(plus(w1,w2),X164),plus(w0,X164))
// but not the last one...
//
// We are still left with some reflexive identities... the next step
// would be congruence closure :|

// #21,#23 pas tout a fait assez identiques pour etre détectées redondantes
// cela dit ces clauses sont pas tres mechantes, moins que #40 par exemple

// résultat 44 solved, 185 unsolved
//   knows  11         45

inequivalentct? s2 and r2;
// print r2;

// should not be there, and should not have other representants:
// n27945 [label="i27945" parents="#27944,#9" clause="#27945(len=0): identical([out(C),[out(C),[out(C),X35749]]],plus(w1,plus(c,plus(w0,w2))),plus(w0,plus(w1,plus(w2,c)))) <== "];
// 
// avec c public, on voit de longues branches de clauses ajoutées qui ne donnent
// pas de ridentical (ce qui semble louche)
//   -> same statement foireux?
// 
// on trouve aussi des trucs inutiles a la fin
