symbols plus/2, zero/0, pair/2, fst/1, snd/1, e/1, pow/2;

private n1, n2, n3, n;
channels C;
var X, Y, Z;

// Protocol
// Three agents, agent <i> only knows n<i>
// . Agent 1 sends X=e(n1)
// . Agent 2 receives X, sends A=X, B=e(n2) and C=X^n2 (ie, e(n1+n2))
// . Agent 3 receives those and sends A'=A^n3 and B'=B^n3
//
// Shared secret: e(n1+n2+n3)
//   Agent 3 has it from C^n3
//   Agent 1 has it from B'^n1
//   Agent 2 has it from A'^n2
// Intruder does not know the shared secret.

// plus is actually a multiplication
// and zero is more like one...
rewrite plus(X,zero) -> X;
rewrite pow(X,zero) -> X;
rewrite pow(e(X),Y) -> e(plus(X,Y));
rewrite pow(pow(X,Y),Z) -> pow(X,plus(Y,Z));
rewrite fst(pair(X,Y)) -> X;
rewrite snd(pair(X,Y)) -> Y;
// The next rule would correspond to assuming that
// pairs are not tagged, ie. everything looks like a pair?
// rewrite pair(fst(X),snd(X)) -> X;

// Trace showing the concrete terms that are sent out
// Saturation OK (<1mn)
stat =
out(C,e(n1)) .
  out(C,pair(e(n1),pair(e(n2),e(plus(n1,n2))))) .
    out(C,pair(e(plus(n1,n3)),e(plus(n2,n3)))) .
      0;

// Same with the (useless) inputs
// Saturation OK (<1mn)
r =
out(C,e(n1)) .
  in(C,X) . out(C,pair(e(n1),pair(e(n2),e(plus(n1,n2))))) .
    in(C,Y) . out(C,pair(e(plus(n1,n3)),e(plus(n2,n3)))) .
      0;

// One interleaving of the "real" protocol
// Saturation on takes a while (~17mn)
// It may help to get rid of pairs
// and avoid redundant output (forwarding X).
run =
out(C,e(n1)) .
  in(C,X) . out(C,pair(X, pair(e(n2), pow(X,n2)))) .
    in(C,Y) . out(C,pair( pow(fst(Y),n3), pow(fst(snd(Y)),n3) )) . 0;

// Testing secrecy
p = run :: in(C,Z).0;
s = run :: in(C,Z).[Z=e(plus(plus(n1,n2),n3))].out(C,zero);

equivalentct? p and s;

// Indistinguishability
i1 = run :: out(C,e(plus(n1,plus(n2,n3)))).0;
i2 = run :: out(C,n).0;

equivalentct? i1 and i2; // This one (?) is incorrect due to incorrect variants
