// NSL with xor
// A -> B: aenc(<na,A>,pub(B))
// B -> A: aenc(<na+B,nb>,pub(A))
// A -> B: aenc(nb,pub(B))

// Well-known attack


#set xor;

symbols plus/2, zero/0, aenc/2, adec/2, pub/1, h/1,
        pair/2, fst/1, snd/1, yes/0, no/0, i/0;
private na, nb, a, b;
channels C;
var X,X1,X2,Y,Z;

rewrite adec(aenc(X,pub(Y)),Y) -> X;
rewrite fst(pair(X,Y)) -> X;
rewrite snd(pair(X,Y)) -> Y;


Tinit = out(C,pub(a)).out(C,pub(b)).0;

RoleAIfst = out(C,aenc(pair(na,pub(a)),pub(i))).0;

RoleAIsnd =
  in(C,X).
  [plus(fst(adec(X,a)),pub(i)) = na].
  out(C,aenc(snd(adec(X,a)),pub(i))).0;

RoleBfst =
  in(C,Y).
  out(C,aenc(pair(plus(fst(adec(Y,b)),pub(b)),nb),snd(adec(Y,b)))).0;

// Test only the relevant interleaving

r1 = Tinit :: RoleAIfst :: RoleBfst :: RoleAIsnd :: out(C,yes);
r2 = Tinit :: RoleAIfst :: RoleBfst :: RoleAIsnd :: out(C,no);

inequivalentct? r1 and r2;
