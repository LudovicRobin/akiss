symbols open/2, commit/2, check/2, sign/2, pk/1, unblind/2, blind/2,
 yes/0, no/0, kAuth/0;

private rAyes, bAyes, rAno, bAno, kA, kB, rBno, bBno, rByes, bByes;

channels A, B, C;

var x, y, z, xAyes, xBno, xByes, xAno;

rewrite open(commit(x, y), y) -> x;
rewrite check(sign(x, y), pk(y)) -> x;
rewrite unblind(sign(blind(x, y), z), y) -> sign(x, z);


AyesP1 = out(A, sign(blind(commit(yes, rAyes), bAyes), kA)).in(A, xAyes). [check(xAyes, pk(kAuth)) = blind(commit(yes, rAyes), bAyes)].0;
AyesP2 = out(C, unblind(xAyes, bAyes)).0;
AyesP3 = out(C, rAyes).0;

AnoP1 = out(A, sign(blind(commit(no, rAno), bAno), kA)).in(A, xAno). [check(xAno, pk(kAuth)) = blind(commit(no, rAno), bAno)].0;
AnoP2 = out(C, unblind(xAno, bAno)).0;
AnoP3 = out(C, rAno).0;


ByesP1 = out(B, sign(blind(commit(yes, rByes), bByes), kB)).in(B, xByes).[check(xByes, pk(kAuth)) = blind(commit(yes, rByes), bByes)].0;
ByesP2 = out(C, unblind(xByes, bByes)).0;
ByesP3 = out(C, rByes).0;


BnoP1 = out(B, sign(blind(commit(no, rBno), bBno), kB)).in(B, xBno).[check(xBno, pk(kAuth)) = blind(commit(no, rBno), bBno)].0;
BnoP2 = out(C, unblind(xBno, bBno)).0;
BnoP3 = out(C, rBno).0;


Phase1AyesBno = interleave_opt AyesP1, BnoP1;
Phase2AyesBno = interleave_opt AyesP2, BnoP2;
Phase3AyesBno = interleave_opt AyesP3, BnoP3;

AyesBno = sequence Phase1AyesBno, Phase2AyesBno, Phase3AyesBno;


Phase1AnoByes = interleave_opt AnoP1, ByesP1;
Phase2AnoByes = interleave_opt AnoP2, ByesP2;
Phase3AnoByes = interleave_opt AnoP3, ByesP3;

AnoByes = sequence Phase1AnoByes, Phase2AnoByes, Phase3AnoByes;

Setup = out(C, pk(kA)).out(C, pk(kB)).0;

P = sequence Setup, AyesBno;
Q = sequence Setup, AnoByes;

equivalentft? P and Q;
