// theory for Pedersen commitments and toy example

symbols pair/2, fst/1, snd/1, open/2, ped/2, forge1/2, forge2/2, no/0, yes/0, a/0, b/0;

private ka, kb, kt, ra, rb;

evchannels bb;

var v, id, r,  x,  y;

// Rewrite rules for pairs

rewrite fst(pair(x, y)) -> x;
rewrite snd(pair(x, y)) -> y;

// Everlasting rewrite rules 

// evrewrite ped(forge1(ped(x,r),y), y) -> ped(x,r);
evrewrite ped(forge1(x, y), y) -> x;
evrewrite forge1(ped(x,r),r) -> x;

// evrewrite ped(y, forge2(ped(x,r),y)) -> ped(x,r);
evrewrite ped(y, forge2(x, y)) -> x;
evrewrite forge2(ped(x,r),x) -> r;

evrewrite forge2(ped(x,r),forge1(ped(x,r),y)) -> y;
evrewrite forge1(ped(x,r),forge2(ped(x,r),y)) -> y;


evrewrite fst(pair(x, y)) -> x;
evrewrite snd(pair(x, y)) -> y;

V = out(bb, ped(v,r)). 0;

Ayes = let v = yes in let id = a in let r = ra in V;
Ano  = let v = no  in let id = a in let r = ra in V;

Byes = let v = yes in let id = b in let r = rb in V;
Bno  = let v = no  in let id = b in let r = rb in V;
// Sanity check: changing rb into ra (reusing same randomness) 
// yields processes that are forward distinguishable

AyBn = Ayes :: Bno ;
AnBy = Ano  :: Byes;

P =  AyBn ;
Q =  AnBy ;

fwdequivalentft? P and Q;
