// Helios without publishing identites; uses pok to avoid replay; vote privacy and forward indistinguishable

symbols aenc/3, adec/2, break/1, pk/1, pair/2, fst/1, snd/1, sign/2, getmsg/1, check/2, pok/2, checkpok/2, ok/0, no/0, yes/0, a/0, b/0, kc/0;

private ka, kb, skE, ra, rb;


channels ch, auth3;
evchannels bb;

var v, va, vb, id, r, k, sig3, pok3, x, x1, x2, x3, y, z, z2;


// Rewrite rules asymmetric for encryption and pairing

rewrite adec(x,aenc(pk(x),y,z)) -> z;
rewrite fst(pair(x, y)) -> x;
rewrite snd(pair(x, y)) -> y;

// Rewrite rules signature

rewrite check(pk(x),sign(x,y)) -> ok;
rewrite getmsg(sign(x,y)) -> y;

// Rewrite rules asymmetric for proof of knowledge
rewrite checkpok(pok(sign(x,aenc(pk(y),r,z)),r),sign(x,aenc(pk(y),r,z))) -> ok;

// Everlasting rewrite rules for asymmetric encryption and pairing

evrewrite adec(x,aenc(pk(x),y,z)) -> z;
evrewrite break(aenc(pk(x),y,z)) -> z;

evrewrite fst(pair(x, y)) -> x;
evrewrite snd(pair(x, y)) -> y;

evrewrite check(pk(x),sign(x,y)) -> ok;
evrewrite getmsg(sign(x,y)) -> y;

// Rewrite rules asymmetric for proof of knowledge
evrewrite checkpok(pok(sign(x,aenc(pk(y),r,z)),r),sign(x,aenc(pk(y),r,z))) -> ok;

V = out(ch, pair(sign(k,aenc(pk(skE),r,v)), pok(sign(k,aenc(pk(skE),r,v)),r))). out(bb, aenc(pk(skE),r,v));


Ayes = let v = yes in let k = ka in let r = ra in V;
Ano  = let v = no  in let k = ka in let r = ra in V;

Byes = let v = yes in let id = b in let k = kb in let r = rb in V;
Bno  = let v = no  in let id = b in let k = kb in let r = rb in V;


AyBn = Ayes || Bno;
AnBy = Ano  || Byes;

BB = in(auth3,z). let sig3 = fst(z) in let pok3 = snd(z) in [check(pk(kc),sig3) = ok].[ok = checkpok(pok3,sig3)].out(bb,getmsg(sig3));

Tally1 = out(bb,va);
Tally2 = out(bb,vb);
Tally3 = out(bb, adec(skE, getmsg(fst(z))));

T = Tally1 || Tally2 || Tally3;

// P =  out(bb,pk(skE)) :: (AyBn || BB) :: let va = yes in let vb = no in T;
// Q =  out(bb,pk(skE)) :: (AnBy || BB) :: let va = no in let vb = yes in T;


P1  =  out(bb,pk(skE)) :: Ayes :: Bno :: BB :: let va = yes in let vb = no in T;
P2  =  out(bb,pk(skE)) :: Ayes :: BB :: Bno :: let va = yes in let vb = no in T;
P3  =  out(bb,pk(skE)) :: Bno :: Ayes :: BB :: let va = yes in let vb = no in T;
P4  =  out(bb,pk(skE)) :: Bno :: BB :: Ayes :: let va = yes in let vb = no in T;
P5  =  out(bb,pk(skE)) :: BB :: Ayes :: Bno :: let va = yes in let vb = no in T;
P6  =  out(bb,pk(skE)) :: BB :: Bno :: Ayes ::let va = yes in let vb = no in T;

Q1  =  out(bb,pk(skE)) :: Ano :: Byes :: BB :: let va = yes in let vb = no in T;
Q2  =  out(bb,pk(skE)) :: Ano :: BB :: Byes :: let va = yes in let vb = no in T;
Q3  =  out(bb,pk(skE)) :: Byes :: Ano :: BB :: let va = yes in let vb = no in T;
Q4  =  out(bb,pk(skE)) :: Byes :: BB :: Ano :: let va = yes in let vb = no in T;
Q5  =  out(bb,pk(skE)) :: BB :: Ano :: Byes :: let va = yes in let vb = no in T;
Q6  =  out(bb,pk(skE)) :: BB :: Byes :: Ano ::let va = yes in let vb = no in T;

//P = P1, P2, P3, P4, P5, P6;

//Q = Q1, Q2, Q3, Q4, Q5, Q6;

equivalentft? P1, P2, P3, P4, P5, P6 and Q1, Q2, Q3, Q4, Q5, Q6; //trace equivalent
fwdequivalentft?  P1, P2, P3, P4, P5, P6 and Q1, Q2, Q3, Q4, Q5, Q6; //not forward indistinguishable


//both forward and trace equivalent => everlasting indistinguishable
equivalentft? P and Q;
fwdequivalentft? P and Q;

