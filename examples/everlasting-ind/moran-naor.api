symbols pair/2, fst/1, snd/1, ped/2, forge1/2, forge2/2, no/0, yes/0, a/0, b/0, c/0;

private ra, rb, rc;

channels ch;

evchannels bb;

var v, va, vb, id, r, r1, r2, r3, x,  y, z;

// Rewrite rules

rewrite fst(pair(x, y)) -> x;
rewrite snd(pair(x, y)) -> y;


// Everlasting rewrite rules 

// evrewrite ped(forge1(ped(x,r),y), y) -> ped(x,r);
evrewrite ped(forge1(x, y), y) -> x;
evrewrite forge1(ped(x,r),r) -> x;

// evrewrite ped(y, forge2(ped(x,r),y)) -> ped(x,r);
evrewrite ped(y, forge2(x, y)) -> x;
evrewrite forge2(ped(x,r),x) -> r;

evrewrite forge2(ped(x,r),forge1(ped(x,r),y)) -> y;
evrewrite forge1(ped(x,r),forge2(ped(x,r),y)) -> y;

evrewrite fst(pair(x, y)) -> x;
evrewrite snd(pair(x, y)) -> y;



V = out(bb, pair(id,ped(v,r))). 0;

Ayes = let v = yes in let id = a in let r = ra in V ;
Ano  = let v = no  in let id = a in let r = ra in V ;

Byes = let v = yes in let id = b in let r = rb in V ;
Bno  = let v = no  in let id = b in let r = rb in V ;

C = in(ch, v). out(bb,  pair(c,ped(v,rc))); //dishonest voter 

AyBn = Ayes :: Bno :: C;
AnBy = Ano  :: Byes :: C;


//Tally publishes the 3 votes in a non-deterministic order
Tally = ( out(bb,va) || out(bb,vb) || out(bb, v) );

Tallyyn = let va = yes in let vb = no in Tally;
Tallyny = let va = no in let vb = yes in Tally;

 P =  AyBn :: Tallyyn;
 Q =  AnBy :: Tallyny;

// fwdequivalentft? P and Q;
equivalentft? P and Q;
