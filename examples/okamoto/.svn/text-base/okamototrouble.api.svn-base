
symbols open/2, tdcommit/3, f/4, check/2, sign/2, pk/1, unblind/2, blind/2, yes/0, no/0, kAuth/0, pek/1, pair/2 ,fst/1 ,snd/1, aenc/2,adec/2;

private rAyes, bAyes, rAno, bAno, kA, kB, rBno, bBno, rByes, bByes, tdAyes, tdAno, tdByes, tdBno, skT;

channels A, B, C, T;

var x, x1, x2,  y, z, xAyes, xBno, xByes, xAno, Vote1, Vote2;


// Rewrite rules for commitment and blind signatures
rewrite open(tdcommit(x, y, z), y) -> x;
rewrite tdcommit(x,f(x1,y,z,x),z)-> tdcommit(x1,y,z);
rewrite open(tdcommit(x, y, z), f (x, y, z, x1)) -> x1;
rewrite f(x1, f (x, y, z, x1), z, x2) -> f (x, y, z, x2);
rewrite check(sign(x, y), pk(y)) -> x;
rewrite unblind(sign(blind(x, y), z), y) -> sign(x, z);
rewrite adec(aenc(x,y),pek(y)) -> y;
rewrite fst(pair(x,y)) ->x;
rewrite snd(pair(x,y)) ->y;

// Phases 1-3 for voter A voting 'yes'
AyesP1 = out(A, sign(blind(tdcommit(yes,rAyes,tdAyes), bAyes), kA)).in(A, xAyes). [check(xAyes, pk(kAuth)) = blind(tdcommit(yes, rAyes, tdAyes), bAyes)].0;
AyesP2 = out(C, unblind(xAyes, bAyes)).0;
AyesP3 = out(C, rAyes).out(T,aenc(pair (yes , pair( rAyes, tdcommit(yes,rAyes,tdAyes))),pek(skT))).0;

// Phases 1-3 for voter A voting 'no'
AnoP1 = out(A, sign(blind(tdcommit(no, rAno,tdAno), bAno), kA)).in(A, xAno). [check(xAno, pk(kAuth)) = blind(tdcommit(no, rAno,tdAno), bAno)].0;
AnoP2 = out(C, unblind(xAno, bAno)).0;
AnoP3 = out(C, rAno).out(T,aenc(pair (no , pair( rAno, tdcommit(yes,rAno,tdAno))),pek(skT))).0;

// Phases 1-3 for voter B voting 'yes'
ByesP1 = out(B, sign(blind(tdcommit(yes, rByes,tdByes), bByes), kB)).in(B, xByes).[check(xByes, pk(kAuth)) = blind(tdcommit(yes, rByes,tdByes), bByes)].0;
ByesP2 = out(C, unblind(xByes, bByes)).0;
ByesP3 = out(C, rByes).out(T,aenc(pair (yes , pair( rByes, tdcommit(yes,rByes,tdByes))),pek(skT))).0;


// Phases 1-3 for voter B voting 'no'
BnoP1 = out(B, sign(blind(tdcommit(no, rBno,tdBno), bBno), kB)).in(B, xBno).[check(xBno, pk(kAuth)) = blind(tdcommit(no, rBno,tdBno), bBno)].0;
BnoP2 = out(C, unblind(xBno, bBno)).0;
BnoP3 = out(C, rBno).out(T,aenc(pair (no, pair( rBno, tdcommit(no,rBno,tdBno))),pek(skT))).0;


//Phase 3-4 for T
TP3= in(T,Vote1).in(T,Vote2).0;
TP4Vote1=[open(snd(snd(Vote1)),fst(snd(Vote1)))=fst(Vote1)].out(T,fst(Vote1)).0;
TP4Vote2=[open(snd(snd(Vote2)),fst(snd(Vote2)))=fst(Vote2)].out(T,fst(Vote2)).0;
TP4Vote12=sequence TP4Vote1, TP4Vote2;
TP4Vote21=sequence TP4Vote2, TP4Vote1;


// Interleaving each of the phases separately
Phase1AyesBno = interleave_opt AyesP1, BnoP1;
Phase2AyesBno = interleave_opt AyesP2, BnoP2;
Phase3AyesBno = interleave_opt AyesP3, BnoP3, TP3;

// protocol for A voting 'yes' and B voting 'no'
AyesBno12 = sequence Phase1AyesBno, Phase2AyesBno, Phase3AyesBno,TP4Vote12;
AyesBno21 = sequence Phase1AyesBno, Phase2AyesBno, Phase3AyesBno,TP4Vote21;

// Interleaving each of the phases separately
Phase1AnoByes = interleave_opt AnoP1, ByesP1;
Phase2AnoByes = interleave_opt AnoP2, ByesP2;
Phase3AnoByes = interleave_opt AnoP3, ByesP3, TP3;

// protocol for A voting 'no' and B voting 'yes'
AnoByes12 = sequence Phase1AnoByes, Phase2AnoByes, Phase3AnoByes,TP4Vote12;
AnoByes21 = sequence Phase1AnoByes, Phase2AnoByes, Phase3AnoByes,TP4Vote21;


// publishing public keys
Setup = out(C, pk(kA)).out(C, pk(kB)).out(C,pek(skT)).0;

P12 = sequence Setup, AyesBno12;
P21 = sequence Setup, AyesBno21;
Q21 = sequence Setup, AnoByes12;
Q12 = sequence Setup, AnoByes21;

equivalentct? P12, P21 and Q12, Q21;
