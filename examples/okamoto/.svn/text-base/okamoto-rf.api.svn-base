
symbols open/2, tdcommit/3, f/4, check/2, sign/2, pk/1, unblind/2, blind/2, yes/0, no/0, kAuth/0, pek/1, pair/2 ,fst/1 ,snd/1, aenc/2,adec/2;

private rAyes, bAyes, rAno, bAno, kA, kB, rBno, bBno, rByes, bByes, tdAyes, tdAno, tdByes, tdBno,skT;

channels A, B, C, chc, T;

var x, x1, x2,  y, z, xAyes, xBno, xByes, xAno, v1, v2;


// Rewrite rules for commitment and blind signatures
rewrite open(tdcommit(x, y, z), y) -> x;
rewrite tdcommit(x,f(x1,y,z,x),z)-> tdcommit(x1,y,z);
rewrite open(tdcommit(x, y, z), f (x, y, z, x1)) -> x1;
rewrite f(x1, f (x, y, z, x1), z, x2) -> f (x, y, z, x2);
rewrite check(sign(x, y), pk(y)) -> x;
rewrite unblind(sign(blind(x, y), z), y) -> sign(x, z);
rewrite adec(aenc(x,y),pek(y)) -> y;
rewrite fst(pair(x,y)) ->x;
rewrite snd(pair(x,y)) ->y;

// Phases 1-2 for voter A voting 'yes'
AchcyesP1 = 
	out(chc, kA).out(chc, bAyes). out(chc, rAyes). out(chc, tdAyes).
       	out(A, sign(blind(tdcommit(yes,rAyes,tdAyes), bAyes), kA)).
       	in(A, xAyes).
       	[check(xAyes, pk(kAuth)) = blind(tdcommit(yes, rAyes, tdAyes), bAyes)].0;
       
AchcyesP2 = out(C, unblind(xAyes, bAyes)).out(T,aenc(pair (yes , pair( rAyes, tdcommit(yes,rAyes,tdAyes))),pek(skT))).0;

// Phases 1-2 for fake voter A pretending to voting 'yes', but voting 'no'
AfakenoP1 = 
       out(chc, kA).out(chc, bAno). out(chc, f(no, rAno, tdAno, yes) ). out(chc, tdAno).
       out(A, sign(blind(tdcommit(no,rAno,tdAno), bAno), kA)).
       in(A, xAno).
       [check(xAno, pk(kAuth)) = blind(tdcommit(no, rAno, tdAno), bAno)].0;

AfakenoP2 = out(C, unblind(xAno, bAno)).out(T,aenc(pair (no, pair( rAno, tdcommit(no,rAno,tdAno))),pek(skT))).0;


// Phases 1-2 for voter B voting 'yes'
ByesP1 = out(B, sign(blind(tdcommit(yes, rByes,tdByes), bByes), kB)).in(B, xByes).[check(xByes, pk(kAuth)) = blind(tdcommit(yes, rByes,tdByes), bByes)].0;
ByesP2 = out(C, unblind(xByes, bByes)).out(C, rByes).out(T,aenc(pair (yes , pair( rByes, tdcommit(yes,rByes,tdByes))),pek(skT))).0;


// Phases 1-2 for voter B voting 'no'
BnoP1 = out(B, sign(blind(tdcommit(no, rBno,tdBno), bBno), kB)).in(B, xBno).[check(xBno, pk(kAuth)) = blind(tdcommit(no, rBno,tdBno), bBno)].0;
BnoP2 = out(C, unblind(xBno, bBno)).out(C, rBno).out(T,aenc(pair (no, pair( rBno, tdcommit(no,rBno,tdBno))),pek(skT))).0;


//Phase 2-3 for T session 1
T1P2 = in(T,v1).0;
T1P3 = [open(snd(snd(adec(v1,skT))),fst(snd(adec(v1,skT))))=fst(adec(v1,skT))].out(T,fst(adec(v1,skT))).0;

//Phase 2-3 for T session 2
T2P2 = in(T,v2).0;
T2P3 = [open(snd(snd(adec(v2,skT))),fst(snd(adec(v2,skT))))=fst(adec(v2,skT))].out(T,fst(adec(v2,skT))).0;


// Interleaving each of the phases separately
Phase1AyesBno = interleave_opt AchcyesP1, BnoP1;
Phase2AyesBno = interleave_opt AchcyesP2, BnoP2, T1P2, T2P2;
Phase3AyesBno = interleave_opt T1P3, T2P3;

// protocol for A voting 'yes' and B voting 'no'
AyesBno = sequence Phase1AyesBno, Phase2AyesBno, Phase3AyesBno;

// Interleaving each of the phases separately
Phase1AnoByes = interleave_opt AfakenoP1, ByesP1;
Phase2AnoByes = interleave_opt AfakenoP2, ByesP2, T1P2, T2P2;
Phase3AnoByes = interleave_opt T1P3, T2P3;

// protocol for A voting 'no' and B voting 'yes'
AnoByes = sequence Phase1AnoByes, Phase2AnoByes, Phase3AnoByes;


// publishing public keys
Setup = out(C, pk(kA)).out(C, pk(kB)).out(C,pek(skT)).0;

P = sequence Setup, AyesBno;
Q = sequence Setup, AnoByes;

equivalentct? P and Q;
