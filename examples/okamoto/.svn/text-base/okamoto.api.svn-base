// This is a modeling of the Okamoto protocol.
// Vote-privacy is proven.
// 

symbols open/2, tdcommit/3, f/4, check/2, sign/2, pk/1, unblind/2, blind/2, yes/0, no/0, kAuth/0, pek/1, pair/2 ,fst/1 ,snd/1, aenc/2,adec/2,skT/0;

private rAyes, bAyes, rAno, bAno, kA, kB, rBno, bBno, rByes, bByes, tdAyes, tdAno, tdByes, tdBno;

channels A, B, C, T;

var x, x1, x2, y, z, xAyes, xBno, xByes, xAno;


// Rewrite rules for commitment and blind signatures
rewrite open(tdcommit(x, y, z), y) -> x;
rewrite tdcommit(x,f(x1,y,z,x),z)-> tdcommit(x1,y,z);
rewrite open(tdcommit(x, y, z), f (x, y, z, x1)) -> x1;
rewrite f(x1, f (x, y, z, x1), z, x2) -> f (x, y, z, x2);
rewrite check(sign(x, y), pk(y)) -> x;
rewrite unblind(sign(blind(x, y), z), y) -> sign(x, z);
rewrite fst(pair(x,y)) ->x;
rewrite snd(pair(x,y)) ->y;

// Phases 1-2 for voter A voting 'yes'
AyesP1 = out(A, sign(blind(tdcommit(yes, rAyes,tdAyes), bAyes), kA)).in(A, xAyes). [check(xAyes, pk(kAuth)) = blind(tdcommit(yes, rAyes,tdAyes), bAyes)].0;
AyesP2 = out(C, unblind(xAyes, bAyes)).out(T, pair(yes, pair(rAyes, tdcommit(yes, rAyes,tdAyes)))).0;


// Phases 1-2 for voter A voting 'no'
AnoP1 = out(A, sign(blind(tdcommit(no, rAno,tdAno), bAno), kA)).in(A, xAno). [check(xAno, pk(kAuth)) = blind(tdcommit(no, rAno,tdAno), bAno)].0;
AnoP2 = out(C, unblind(xAno, bAno)).out(T, pair(no, pair(rAno, tdcommit(no, rAno,tdAno)))).0;


// Phases 1-2 for voter B voting 'yes'
ByesP1 = out(B, sign(blind(tdcommit(yes, rByes,tdByes), bByes), kB)).in(B, xByes). [check(xByes, pk(kAuth)) = blind(tdcommit(yes, rByes,tdByes), bByes)].0;
ByesP2 = out(C, unblind(xByes, bByes)).out(T, pair(yes, pair(rByes, tdcommit(yes, rByes,tdByes)))).0;


// Phases 1-2 for voter B voting 'no'
BnoP1 = out(B, sign(blind(tdcommit(no, rBno,tdBno), bBno), kB)).in(B, xBno). [check(xBno, pk(kAuth)) = blind(tdcommit(no, rBno,tdBno), bBno)].0;
BnoP2 = out(C, unblind(xBno, bBno)).out(T, pair(no, pair(rBno, tdcommit(no, rBno,tdBno)))).0;


// Interleaving each of the phases separately
Phase1AyesBno = interleave_opt AyesP1, BnoP1;
Phase2AyesBno = interleave_opt AyesP2, BnoP2;

// protocol for A voting 'yes' and B voting 'no'
AyesBno = sequence Phase1AyesBno, Phase2AyesBno;

// Interleaving each of the phases separately
Phase1AnoByes = interleave_opt AnoP1, ByesP1;
Phase2AnoByes = interleave_opt AnoP2, ByesP2;

// protocol for A voting 'no' and B voting 'yes'
AnoByes = sequence Phase1AnoByes, Phase2AnoByes;

// publishing public keys
Setup = out(C, pk(kA)).out(C, pk(kB)).0;

P = sequence Setup, AyesBno;
Q = sequence Setup, AnoByes;

equivalentft? P and Q;
