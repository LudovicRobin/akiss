symbols enc/2, dec/2, aenc/2, adec/2, pk/1, sign/2, ok/0, msg/1, check/2, pair/2, fst/1, snd/1, n1/0, n2/0, n3/0; 

channels c;

private skB, skA, k;

var X, Y, Z, x, xp;

rewrite fst(pair(X, Y)) -> X;
rewrite snd(pair(X, Y)) -> Y;

rewrite adec(aenc(X, pk(Y)), Y) -> X;
rewrite dec(enc(X, Y), Y) -> X;
rewrite check(sign(X,Y),pk(Y)) -> ok;
rewrite msg(sign(X,Y)) -> X;

t1A = out(c, aenc(sign(pair(pk(skA),pair(pk(skB),k)),skA),pk(skB))).0;
t1B = in(c, X).
     [check(adec(X,skB),pk(skA)) = ok].
     [fst(msg(adec(X,skB))) = pk(skA)].
     [fst(snd(msg(adec(X,skB)))) = pk(skB)].
     out(c, enc(x,snd(snd(msg(adec(X,skB)))))).0;

t2A = out(c, aenc(sign(pair(pk(skA),pair(pk(skB),k)),skA),pk(skB))).0;
t2B = in(c, X).
     [check(adec(X,skB),pk(skA)) = ok].
     [fst(msg(adec(X,skB))) = pk(skA)].
     [fst(snd(msg(adec(X,skB)))) = pk(skB)].
     out(c, enc(xp,snd(snd(msg(adec(X,skB)))))).0;

t1 = interleave t1A, t1B;
t2 = interleave t2A, t2B;

Setup = in(c, x).in(c, xp).out(c, pk(skA)).out(c, pk(skB)).0;

P1 = sequence Setup,t1;
P2 = sequence Setup,t2;

equivalentft? P1 and P2;
